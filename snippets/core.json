{
  "Import Material Package": {
    "prefix": "importM",
    "body": ["import 'package:flutter/material.dart';"],
    "description": "Import Material Package"
  },
  "Import Cupertino Package": {
    "prefix": "importC",
    "body": ["import 'package:flutter/cupertino.dart';"],
    "description": "Import Cupertino Package"
  },
  "Stateless Widget": {
    "prefix": "stlW",
    "body": [
      "class ${1:} extends StatelessWidget {",
      "  const ${1:}({Key? key}) : super(key: key);",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container();",
      "  }",
      "}"
    ],
    "description": "Stateless Widget"
  },
  "Stateful Widget": {
    "prefix": "stfW",
    "body": [
      "class ${1:} extends StatefulWidget {",
      "  ${1:}({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  _${1:}State createState() => _${1:}State();",
      "}",
      "",
      "class _${1:}State extends State<${1:}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "    );",
      "  }",
      "}"
    ],
    "description": "Stateful Widget"
  },
  "Build Method": {
    "prefix": "buildM",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return Container();",
      "}"
    ],
    "description": "Build Method"
  },
  "Init State Method": {
    "prefix": "initS",
    "body": [
      "@override",
      "  void initState() {",
      "    super.initState();",
      "      ${1:}",
      "  }    "
    ],
    "description": "Init State Method"
  },
  "Dispose Method": {
    "prefix": "dis",
    "body": [
      " @override",
      "  void dispose() {",
      "    super.dispose();",
      "      ${1:}",
      "  }"
    ],
    "description": "Dispose Method"
  },
  "ListView Builder": {
    "prefix": "listViewB",
    "body": [
      " ListView.builder(",
      "              itemCount: ${1:5},",
      "              shrinkWrap: true,",
      "              physics: ScrollPhysics(),",
      "              itemBuilder: (BuildContext context, int index) {",
      "                return Container();",
      "              },",
      "            )"
    ],
    "description": "ListView Builder"
  },
  "ListView Separator": {
    "prefix": "ListViewS",
    "body": [
      "    ListView.separated(",
      "          itemCount: 1,",
      "          shrinkWrap: true,",
      "          physics: ScrollPhysics(),",
      "          separatorBuilder: (BuildContext context, int index) {",
      "            return Container();",
      "          },",
      "          itemBuilder: (BuildContext context, int index) {",
      "            return Container();",
      "          },",
      "        )"
    ],
    "description": "ListView Separator"
  },
  "GridView Builder": {
    "prefix": "gridViewB",
    "body": [
      "  GridView.builder(",
      "          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "            crossAxisCount: 2,",
      "          ),",
      "          itemCount: 2,",
      "          shrinkWrap: true,",
      "          physics: ScrollPhysics(),",
      "          itemBuilder: (BuildContext context, int index) {",
      "            return Container();",
      "          },",
      "        )"
    ],
    "description": "GridView Builder"
  },
  "GridView Count": {
    "prefix": "gridViewC",
    "body": [
      "   GridView.count(",
      "          crossAxisSpacing: 1,",
      "          mainAxisSpacing: 2,",
      "          crossAxisCount: 2,",
      "          children: <Widget>[${1:}],",
      "        )"
    ],
    "description": "GridView Count"
  },
  "GridView Extent": {
    "prefix": "gridViewE",
    "body": [
      "  GridView.extent(",
      "          maxCrossAxisExtent: 2,",
      "          children: <Widget>[${1:}],",
      "        )"
    ],
    "description": "GridView Extent"
  },
  "Custom Scroll View": {
    "prefix": "customSV",
    "body": [
      "  CustomScrollView(",
      "          slivers: <Widget>[${1:}],",
      "        ),"
    ],
    "description": "Custom Scroll View"
  },
  "Stream Builder": {
    "prefix": "streamB",
    "body": [
      " StreamBuilder(",
      "          stream: ${1:},",
      "          builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "            return Container();",
      "          },",
      "        ),"
    ],
    "description": "Stream Builder"
  },
  "Orientation Builder": {
    "prefix": "oriB",
    "body": [
      "OrientationBuilder(",
      "    builder: (context, orientation) {",
      "    return GridView.count(",
      "    // Create a grid with 2 columns in portrait mode,",
      "    // or 3 columns in landscape mode.",
      "    crossAxisCount: orientation == Orientation.portrait ? 2 : 3,",
      "    children: [",
      "              Container(),",
      "             ],",
      "          );",
      "       },",
      "    )"
    ],
    "description": "Orientation Builder"
  },
  "Layout Builder": {
    "prefix": "layoutB",
    "body": [
      "LayoutBuilder(",
      "     builder: (BuildContext context, BoxConstraints constraints) {",
      "       if (constraints.maxWidth <= 767) {",
      "         return Container(); // Mobile View Breakpoint",
      "         } else if (constraints.maxWidth >= 768 &&",
      "           constraints.maxWidth <= 1023) {",
      "              return Container(); // Tablet View Breakpoint",
      "               } else {",
      "                 return Container(); // Mobile View Breakpoint",
      "               }",
      "            },",
      "          )"
    ],
    "description": "Layout Builder"
  },
  "Single Child Scroll View": {
    "prefix": "singleChildSV",
    "body": [
      "  SingleChildScrollView(",
      "       child: Column(",
      "         children: [${1:}],",
      "       ),",
      "    ),"
    ],
    "description": "Single Child Scroll View"
  },
  "Future Builder": {
    "prefix": "futureB",
    "body": [
      "  FutureBuilder(",
      "     future: ${1:},",
      "     builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "       return Container();",
      "       },",
      "    )"
    ],
    "description": "Future Builder"
  },
  "Future Builder with ListView Model": {
    "prefix": "futureBLVModel",
    "body": [
      "FutureBuilder<${1:}>(",
      "      future: ${2:},",
      "      builder: (context, snapshot) {",
      "        if (snapshot.hasData) {",
      "          return ListView.builder(",
      "            itemCount: 5,",
      "            shrinkWrap: true,",
      "            physics: ScrollPhysics(),",
      "            itemBuilder: (BuildContext context, int index) {",
      "              return Container();",
      "            },",
      "          );",
      "        } else if (snapshot.hasError) {",
      "          return Text(\"${snapshot.error}\");",
      "        }",
      "        return Center(child: CircularProgressIndicator());",
      "      },",
      "    )"
    ],
    "description": "Future Builder with ListView Model"
  },
  "Future Builder with ListView": {
    "prefix": "futureBLV",
    "body": [
      "FutureBuilder(",
      "      future: ${1:},",
      "      builder: (context, snapshot) {",
      "        if (snapshot.hasData) {",
      "          return ListView.builder(",
      "            itemCount: 5,",
      "            shrinkWrap: true,",
      "            physics: ScrollPhysics(),",
      "            itemBuilder: (BuildContext context, int index) {",
      "              return Container();",
      "            },",
      "          );",
      "        } else if (snapshot.hasError) {",
      "          return Text(\"${snapshot.error}\");",
      "        }",
      "        return Center(child: CircularProgressIndicator());",
      "      },",
      "    )"
    ],
    "description": "Future Builder with ListView"
  },
  "Debug Print": {
    "prefix": "debugP",
    "body": ["debugPrint('${1:}');"],
    "description": "Debug Print"
  },
  "Show Dialog Method": {
    "prefix": "alertDialog",
    "body": [
      " showDialog(",
      "    context: context,",
      "    useSafeArea: true,",
      "    barrierDismissible: false,",
      "    builder: (context) {",
      "    return AlertDialog(",
      "       title: Text('Title'),",
      "       content: Text('Content'),",
      "       );",
      "     },",
      "   );"
    ],
    "description": "Show Dialog Method"
  },
  "Responsive Class Code": {
    "prefix": "resClass",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "///  https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard",
      "/// all credits go to abuanwar072",
      "class Responsive extends StatelessWidget {",
      "  final Widget? mobile;",
      "  final Widget? tablet;",
      "  final Widget? desktop;",
      "",
      "  const Responsive({",
      "    Key? key,",
      "    this.mobile,",
      "    this.tablet,",
      "    this.desktop,",
      "  }) : super(key: key);",
      "",
      "// This size work fine on my design, maybe you need some customization depends on your design",
      "",
      "  // This isMobile, isTablet, isDesktop help us later",
      "  static bool isMobile(BuildContext context) =>",
      "      MediaQuery.of(context).size.width < 850;",
      "",
      "  static bool isTablet(BuildContext context) =>",
      "      MediaQuery.of(context).size.width < 1100 &&",
      "      MediaQuery.of(context).size.width >= 850;",
      "",
      "  static bool isDesktop(BuildContext context) =>",
      "      MediaQuery.of(context).size.width >= 1100;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final Size _size = MediaQuery.of(context).size;",
      "    // If our width is more than 1100 then we consider it a desktop",
      "    if (_size.width >= 1100) {",
      "      return desktop!;",
      "    }",
      "    // If width it less then 1100 and more then 850 we consider it as tablet",
      "    else if (_size.width >= 850 && tablet != null) {",
      "      return tablet!;",
      "    }",
      "    // Or less then that we called it mobile",
      "    else {",
      "      return mobile!;",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Responsive Class Code"
  }
}
